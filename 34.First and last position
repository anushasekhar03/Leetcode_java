Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.
If target is not found in the array, return [-1, -1].
You must write an algorithm with O(log n) runtime complexity.

1.BRUTEFORCE APPROACH
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int arr[]= new int[2];
        arr[0]=arr[1]=-1;
        for(int i=0;i<nums.length;i++){
            if(nums[i]==target){
                arr[0]=i;
                while(i<nums.length && nums[i+1]==target){
                    i++;
                    arr[1]=i;
                }
            }
        }
        return arr;   
    }
}

LEETCODE:
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] result = new int[2];
        result[0] = findFirst(nums, target);
        result[1] = findLast(nums, target);
        return result;
    }

    private int findFirst(int[] nums, int target) {
        int start = 0, end = nums.length - 1;
        int index = -1;
        
        while (start <= end) {
            int mid = start + (end - start) / 2;
            if (nums[mid] >= target) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
            if (nums[mid] == target) {
                index = mid;
            }
        }
        return index;
    }

    private int findLast(int[] nums, int target) {
        int start = 0, end = nums.length - 1;
        int index = -1;
        while (start <= end) {
            int mid = start + (end - start) / 2;
            if (nums[mid] <= target) {
                start = mid + 1;
            } else {
                end = mid - 1;
            }
            if (nums[mid] == target) {
                index = mid;
            }
        }
        return index;
    }
}


