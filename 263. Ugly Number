An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.
Given an integer n, return true if n is an ugly number.
Example 1:
Input: n = 6
Output: true
Explanation: 6 = 2 Ã— 3
Example 2:
Input: n = 1
Output: true
Explanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.
USING COLLECTIONS-Optimal approach
import java.util.HashSet;
import java.util.Set;

class Solution {
    public boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        Set<Integer> divisors = new HashSet<>();
        divisors.add(2);
        divisors.add(3);
        divisors.add(5);

        for (int divisor : divisors) {
            while (n % divisor == 0) {
                n /= divisor;
            }
        }
        return n == 1;
    }
}

USING Brute force:
class Solution {
    public boolean isUgly(int n) {
        if(n<=0){
            return false;
            }
        while(n!=1){
            if(n%2==0){
                n=n/2;
            }
            else if(n%3==0){
                n=n/3;
            }
            else if(n%5==0){
                n=n/5;}
            else{
             return false;
             } 
        }
        return true;
        }
}

